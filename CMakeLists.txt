CMAKE_MINIMUM_REQUIRED(VERSION 3.10)
PROJECT(web_service)

#### compile setting
SET(CMAKE_C_STANDARD 11)
SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_STANDARD_REQUIRED YES)
SET(CMAKE_C_FLAGS "-fPIC -DNDEBUG")
SET(CMAKE_CXX_FLAGS "-fPIC -DNDEBUG")

#### path setting
SET(CMAKE_INSTALL_PREFIX "$ENV{HOME}/myframe")
SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
SET(MYFRAME_INSTALL_SERVICE_DIR ${CMAKE_INSTALL_PREFIX}/service)
SET(MYFRAME_INSTALL_LIB_DIR ${CMAKE_INSTALL_PREFIX}/lib)

#### dep 3rd lib
FIND_PACKAGE(jsoncpp REQUIRED)
FIND_PACKAGE(gflags REQUIRED)
FIND_PACKAGE(GTest REQUIRED)
FIND_PACKAGE(websocketpp REQUIRED)
FIND_PACKAGE(OpenSSL)
FIND_PACKAGE(Boost COMPONENTS system thread)
FIND_PACKAGE(Protobuf REQUIRED)

#### include directory
INCLUDE_DIRECTORIES(${CMAKE_INSTALL_PREFIX}/inc)
INCLUDE_DIRECTORIES(${Protobuf_INCLUDE_DIRS})

#### lib path
LINK_DIRECTORIES(${CMAKE_INSTALL_PREFIX}/lib)

#### lib
ADD_LIBRARY(${PROJECT_NAME} SHARED
    ${PROJECT_NAME}.cpp
    web_service_impl.cpp
)
TARGET_LINK_LIBRARIES(${PROJECT_NAME}
    dl pthread
    ssl crypto
    ${Boost_LIBRARIES}
    glog gflags jsoncpp
    ${Protobuf_LIBRARIES}
    myframe
    myframe_pb
    -Wl,-z,defs
)

#### install
INSTALL(TARGETS ${PROJECT_NAME}
    LIBRARY DESTINATION ${MYFRAME_INSTALL_LIB_DIR}
    ARCHIVE DESTINATION ${MYFRAME_INSTALL_LIB_DIR}
    RUNTIME DESTINATION ${MYFRAME_INSTALL_LIB_DIR}
)
FILE(GLOB conf_files "*.json")
INSTALL(FILES
    ${conf_files}
    PERMISSIONS
    OWNER_READ
    GROUP_READ
    WORLD_READ
    DESTINATION ${MYFRAME_INSTALL_SERVICE_DIR}
)